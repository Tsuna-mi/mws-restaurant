class DBHelper{static get DATABASE_URL(){return"http://localhost:8000/assets/data/restaurants.json"}static fetchRestaurants(t){const e=new XMLHttpRequest;e.open("GET",DBHelper.DATABASE_URL),e.onload=(()=>{if(200===e.status){const s=JSON.parse(e.responseText).restaurants;t(null,s)}else{const s=`Request failed. Returned status of ${e.status}`;t(s,null)}}),e.send()}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((s,a)=>{if(s)e(s,null);else{const s=a.find(e=>e.id==t);s?e(null,s):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((s,a)=>{if(s)e(s,null);else{const s=a.filter(e=>e.cuisine_type===t);e(null,s)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((s,a)=>{if(s)e(s,null);else{const s=a.filter(e=>e.neighborhood===t);e(null,s)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,s){DBHelper.fetchRestaurants((a,n)=>{if(a)s(a,null);else{let a=n;"all"!==t&&(a=a.filter(e=>e.cuisine_type===t)),"all"!==e&&(a=a.filter(t=>t.neighborhood===e)),s(null,a)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,s)=>{if(e)t(e,null);else{const e=s.map((t,e)=>s[e].neighborhood),a=e.filter((t,s)=>e.indexOf(t)===s);t(null,a)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,s)=>{if(e)t(e,null);else{const e=s.map((t,e)=>s[e].cuisine_type),a=e.filter((t,s)=>e.indexOf(t)===s);t(null,a)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`dist/img/${t.photograph}`}static mapMarkerForRestaurant(t,e){const s=window.google,a={url:"./assets/img/restaurant-icon.svg",scaledSize:new s.maps.Size(50,50)};return new s.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),icon:a,map:e,animation:s.maps.Animation.DROP})}}
//# sourceMappingURL=maps/dbhelper.js.map
